"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[368],{2360:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=s(2488),r=s(6428);const l={sidebar_position:3},t="api.fs",a={id:"api-reference/fs",title:"api.fs",description:"The api.fs module provides functions for working with the file system.",source:"@site/docs/api-reference/fs.md",sourceDirName:"api-reference",slug:"/api-reference/fs",permalink:"/spito/docs/api-reference/fs",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-reference/fs.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"api.sys",permalink:"/spito/docs/api-reference/sys"},next:{title:"api.info",permalink:"/spito/docs/api-reference/info"}},d={},c=[{value:"api.fs.pathExists",id:"apifspathexists",level:2},{value:"Arguments:",id:"arguments",level:3},{value:"Returns:",id:"returns",level:3},{value:"Example usage:",id:"example-usage",level:3},{value:"api.fs.fileExists",id:"apifsfileexists",level:2},{value:"Arguments:",id:"arguments-1",level:3},{value:"Returns:",id:"returns-1",level:3},{value:"Example usage:",id:"example-usage-1",level:3},{value:"api.fs.readFile",id:"apifsreadfile",level:2},{value:"Arguments:",id:"arguments-2",level:3},{value:"Returns:",id:"returns-2",level:3},{value:"Example usage:",id:"example-usage-2",level:3},{value:"api.fs.readDir",id:"apifsreaddir",level:2},{value:"Arguments:",id:"arguments-3",level:3},{value:"Returns:",id:"returns-3",level:3},{value:"Example usage:",id:"example-usage-3",level:3},{value:"api.fs.fileContains",id:"apifsfilecontains",level:2},{value:"Arguments:",id:"arguments-4",level:3},{value:"Returns:",id:"returns-4",level:3},{value:"Example usage:",id:"example-usage-4",level:3},{value:"api.fs.removeComments",id:"apifsremovecomments",level:2},{value:"Arguments:",id:"arguments-5",level:3},{value:"Returns:",id:"returns-5",level:3},{value:"Example usage:",id:"example-usage-5",level:3},{value:"api.fs.find",id:"apifsfind",level:2},{value:"Arguments:",id:"arguments-6",level:3},{value:"Returns:",id:"returns-6",level:3},{value:"Example usage:",id:"example-usage-6",level:3},{value:"api.fs.findAll",id:"apifsfindall",level:2},{value:"Arguments:",id:"arguments-7",level:3},{value:"Returns:",id:"returns-7",level:3},{value:"Example usage:",id:"example-usage-7",level:3},{value:"api.fs.getProperLines",id:"apifsgetproperlines",level:2},{value:"Arguments:",id:"arguments-8",level:3},{value:"Returns:",id:"returns-8",level:3},{value:"Example usage:",id:"example-usage-8",level:3},{value:"api.fs.createFile",id:"apifscreatefile",level:2},{value:"Arguments:",id:"arguments-9",level:3},{value:"Example usage:",id:"example-usage-9",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"apifs",children:"api.fs"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"api.fs"})," module provides functions for working with the file system."]}),"\n",(0,i.jsx)(n.h2,{id:"apifspathexists",children:"api.fs.pathExists"}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (string): The path to check."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"exists"})," (bool): Whether the path exists."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local exists = api.fs.pathExists("/etc/passwd")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsfileexists",children:"api.fs.fileExists"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-1",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (string): The path to check."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isDirectory"})," (bool): Whether the path is a directory."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-1",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"exists"})," (bool): Whether the file exists."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-1",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local exists = api.fs.fileExists("/etc/passwd", false)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsreadfile",children:"api.fs.readFile"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-2",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (string): The path to read."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-2",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," (string): The content of the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string): The error message if the file does not exist."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-2",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function readPasswd()\n  local content, err = api.fs.readFile("/etc/passwd")\n  if err ~= nil then\n    api.info.error("Error occured during reading the file: " .. err)\n    return false\n  end\n  return true\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsreaddir",children:"api.fs.readDir"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-3",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (string): The path to read."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-3",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"files"})," ([]string): The files in the directory."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string): The error message if the directory does not exist."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-3",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function readDir()\n  local files = api.fs.readDir("/etc")\n  for _, file in ipairs(files) do\n    api.info.info(file)\n  end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsfilecontains",children:"api.fs.fileContains"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-4",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fileContent"})," (string): The content of the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," (string): The content to check."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-4",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"contains"})," (bool): Whether the file contains the content."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-4",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local contains = api.fs.fileContains(api.fs.readFile("/etc/passwd"), "root")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsremovecomments",children:"api.fs.removeComments"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-5",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," (string): The content to remove comments from."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"singleLineStart"})," (string): The start of a single line comment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"multiLineStart"})," (string): The start of a multi line comment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"multiLineEnd"})," (string): The end of a multi line comment."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-5",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," (string): The content without comments."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-5",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local content = api.fs.removeComments(api.fs.readFile("/etc/passwd"), "#", "/*", "*/")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsfind",children:"api.fs.find"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-6",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regex"})," (string): The regex to search for."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fileContent"})," (string): The content to search in."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-6",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lines"})," ([]int): The lines where the regex was found."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string): The error message if the regex is invalid."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-6",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function findRoot()\n  local lines, err = api.fs.find("root", api.fs.readFile("/etc/passwd"))\n  if err ~= nil then\n    api.info.error("Error occured during finding the regex: " .. err)\n    return false\n  end\n  return true\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsfindall",children:"api.fs.findAll"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-7",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regex"})," (string): The regex to search for."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fileContent"})," (string): The content to search in."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-7",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lines"})," ([][]int): The lines where the regex was found."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," - The error message if the regex is invalid."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-7",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function findAllRoots()\n  local lines, err = api.fs.findAll("root", api.fs.readFile("/etc/passwd"))\n  if err ~= nil then\n    api.info.error("Error occured during finding the regex: " .. err)\n    return false\n  end\n  return true\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifsgetproperlines",children:"api.fs.getProperLines"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-8",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"regex"})," (string): The regex to search for."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fileContent"})," (string): The content to search in."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-8",children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lines"})," ([]string): The lines where the regex was found."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string): The error message if the regex is invalid."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-8",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function getRoots()\n  local lines, err = api.fs.getProperLines("root", api.fs.readFile("/etc/passwd"))\n  if err ~= nil then\n    api.info.error("Error occured during finding the regex: " .. err)\n    return false\n  end\n  return true\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apifscreatefile",children:"api.fs.createFile"}),"\n",(0,i.jsx)(n.h3,{id:"arguments-9",children:"Arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (string): The path to create."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," (string): The content of the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," (CreateFileOptions): The options for creating the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string): The error message if the file already exists."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CreateFileOptions"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"optional"})," (bool): Whether the file is optional."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fileType"})," (string): The type of the file."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-9",children:"Example usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function createFile()\n  local err = api.fs.createFile("/etc/passwd", "root:x:0:0:root:/root:/bin/bash", { optional = false, fileType = "passwd" })\n  if err ~= nil then\n    api.info.error("Error occured during creating the file: " .. err)\n    return false\n  end\n  return true\nend\n'})})]})}function o(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6428:(e,n,s)=>{s.d(n,{I:()=>a,M:()=>t});var i=s(6651);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);